{"ast":null,"code":"var _jsxFileName = \"/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/context/auth.context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userData, setUserData] = useState('');\n  const [user, setUser] = useState(null);\n\n  const verifyStoredToken = () => {\n    // Get the stored token from the localStorage\n    const storedToken = localStorage.getItem('authToken'); // If the token exists in the localStorage\n\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(`${API_URL}/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        // If the server verifies that JWT token is valid  ✅\n        const user = response.data;\n        setUser(user);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      }).catch(error => {\n        // If the server sends an error response (invalid token) ❌\n        setIsLoggedIn(false);\n        setUser(null);\n        setIsLoading(false);\n      });\n    } else {\n      // If the token is not available\n      setIsLoading(false);\n    }\n  };\n\n  const logInUser = token => {\n    localStorage.setItem('authToken', token);\n    verifyStoredToken();\n    /* \n        After saving the token in the localStorage we call the\n        function `verifyStoredToken` which sends a new request to the\n        server to verify the token. Upon receiving the response the function \n        `verifyStoredToken` updates the state variables `isLoggedIn`, `user` and `isLoading`\n      */\n  };\n\n  const logOutUser = () => {\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem('authToken'); // Update the state variables\n\n    setIsLoggedIn(false);\n    setUser(null);\n  };\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      userData,\n      logInUser,\n      logOutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"zpnnDnQcngL9id9d7x0LJM4tT7g=\");\n\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"sources":["/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/context/auth.context.js"],"names":["React","useState","useEffect","axios","API_URL","process","env","REACT_APP_API_URL","AuthContext","createContext","AuthProviderWrapper","props","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","userData","setUserData","user","setUser","verifyStoredToken","storedToken","localStorage","getItem","get","headers","Authorization","then","response","data","catch","error","logInUser","token","setItem","logOutUser","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AAEA,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AACnC,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAEa,SAAF,EAAaC,YAAb,IAA8Bd,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAEe,QAAF,EAAYC,WAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAEiB,IAAF,EAAQC,OAAR,IAAoBlB,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMmB,iBAAiB,GAAG,MAAM;AAC/B;AACA,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,CAF+B,CAI/B;;AACA,QAAIF,WAAJ,EAAiB;AAChB;AACAlB,MAAAA,KAAK,CACHqB,GADF,CACO,GAAEpB,OAAQ,cADjB,EACgC;AAAEqB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASL,WAAY;AAAvC;AAAX,OADhC,EAEEM,IAFF,CAEQC,QAAD,IAAc;AACnB;AACA,cAAMV,IAAI,GAAGU,QAAQ,CAACC,IAAtB;AACAV,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAL,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,OARF,EASEe,KATF,CASSC,KAAD,IAAW;AACjB;AACAlB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,OAdF;AAeA,KAjBD,MAiBO;AACN;AACAA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA;AACD,GA1BD;;AA4BA,QAAMiB,SAAS,GAAIC,KAAD,IAAW;AAC5BX,IAAAA,YAAY,CAACY,OAAb,CAAqB,WAArB,EAAkCD,KAAlC;AACAb,IAAAA,iBAAiB;AAEjB;AACF;AACA;AACA;AACA;AACA;AACE,GAVD;;AAYA,QAAMe,UAAU,GAAG,MAAM;AACxB;AACAb,IAAAA,YAAY,CAACc,UAAb,CAAwB,WAAxB,EAFwB,CAIxB;;AACAvB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,GAPD;;AASAjB,EAAAA,SAAS,CAAC,MAAM;AACfkB,IAAAA,iBAAiB;AACjB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAER,MAAAA,UAAF;AAAcE,MAAAA,SAAd;AAAyBI,MAAAA,IAAzB;AAA+BF,MAAAA,QAA/B;AAAyCgB,MAAAA,SAAzC;AAAoDG,MAAAA;AAApD,KAA7B;AAAA,cACExB,KAAK,CAAC0B;AADR;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAhEQ3B,mB;;KAAAA,mB;AAkET,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n\tconst [ isLoggedIn, setIsLoggedIn ] = useState(false);\n\tconst [ isLoading, setIsLoading ] = useState(true);\n\tconst [ userData, setUserData ] = useState('');\n\tconst [ user, setUser ] = useState(null);\n\n\tconst verifyStoredToken = () => {\n\t\t// Get the stored token from the localStorage\n\t\tconst storedToken = localStorage.getItem('authToken');\n\n\t\t// If the token exists in the localStorage\n\t\tif (storedToken) {\n\t\t\t// We must send the JWT token in the request's \"Authorization\" Headers\n\t\t\taxios\n\t\t\t\t.get(`${API_URL}/auth/verify`, { headers: { Authorization: `Bearer ${storedToken}` } })\n\t\t\t\t.then((response) => {\n\t\t\t\t\t// If the server verifies that JWT token is valid  ✅\n\t\t\t\t\tconst user = response.data;\n\t\t\t\t\tsetUser(user);\n\t\t\t\t\tsetIsLoggedIn(true);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\t// If the server sends an error response (invalid token) ❌\n\t\t\t\t\tsetIsLoggedIn(false);\n\t\t\t\t\tsetUser(null);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t});\n\t\t} else {\n\t\t\t// If the token is not available\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst logInUser = (token) => {\n\t\tlocalStorage.setItem('authToken', token);\n\t\tverifyStoredToken();\n\n\t\t/* \n      After saving the token in the localStorage we call the\n      function `verifyStoredToken` which sends a new request to the\n      server to verify the token. Upon receiving the response the function \n      `verifyStoredToken` updates the state variables `isLoggedIn`, `user` and `isLoading`\n    */\n\t};\n\n\tconst logOutUser = () => {\n\t\t// Upon logout, remove the token from the localStorage\n\t\tlocalStorage.removeItem('authToken');\n\n\t\t// Update the state variables\n\t\tsetIsLoggedIn(false);\n\t\tsetUser(null);\n\t};\n\n\tuseEffect(() => {\n\t\tverifyStoredToken();\n\t}, []);\n\n\treturn (\n\t\t<AuthContext.Provider value={{ isLoggedIn, isLoading, user, userData, logInUser, logOutUser }}>\n\t\t\t{props.children}\n\t\t</AuthContext.Provider>\n\t);\n}\n\nexport { AuthProviderWrapper, AuthContext };\n"]},"metadata":{},"sourceType":"module"}