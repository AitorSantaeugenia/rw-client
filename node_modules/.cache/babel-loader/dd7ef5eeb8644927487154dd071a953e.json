{"ast":null,"code":"var _jsxFileName = \"/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/components/AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nfunction AddTask(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault(); // We need the project id when creating the new task\n\n    const {\n      projectId\n    } = props; // Create an object representing the body of the POST request\n\n    const requestBody = {\n      title,\n      description,\n      projectId\n    }; // Get the token from the localStorage\n\n    const storedToken = localStorage.getItem('authToken');\n    setIsLoading(true); // Send the token through the request \"Authorization\" Headers   \n\n    axios.post(`${API_URL}/tasks`, requestBody, {\n      headers: {\n        Authorization: `Bearer ${storedToken}`\n      }\n    }).then(response => {\n      // Reset the state to clear the inputs\n      setTitle(\"\");\n      setDescription(\"\");\n      setIsLoading(false); // Invoke the callback function coming through the props\n      // from the ProjectDetailsPage, to refresh the project details\n\n      props.refreshProject();\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AddTask\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        name: \"description\",\n        value: description,\n        onChange: e => setDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"grow\",\n        size: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTask, \"/BgMD+UfLGf1BTyUTptMaSATlxA=\");\n\n_c = AddTask;\nexport default AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/components/AddTask.js"],"names":["useState","axios","Spinner","API_URL","process","env","REACT_APP_API_URL","AddTask","props","title","setTitle","description","setDescription","isLoading","setIsLoading","handleSubmit","e","preventDefault","projectId","requestBody","storedToken","localStorage","getItem","post","headers","Authorization","then","response","refreshProject","catch","error","console","log","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAK,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAAzC;;AAGA,QAAMe,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF,GAD0B,CAG1B;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgBV,KAAtB,CAJ0B,CAK1B;;AACA,UAAMW,WAAW,GAAG;AAAEV,MAAAA,KAAF;AAASE,MAAAA,WAAT;AAAsBO,MAAAA;AAAtB,KAApB,CAN0B,CAQ1B;;AACA,UAAME,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB;AACAR,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAV0B,CAW1B;;AACAb,IAAAA,KAAK,CACFsB,IADH,CAEK,GAAEpB,OAAQ,QAFf,EAGIgB,WAHJ,EAII;AAAEK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASL,WAAY;AAAvC;AAAX,KAJJ,EAMGM,IANH,CAMSC,QAAD,IAAc;AAClB;AACAjB,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ,CAJkB,CAKlB;AACA;;AACAN,MAAAA,KAAK,CAACoB,cAAN;AACD,KAdH,EAeGC,KAfH,CAeUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAfpB;AAgBD,GA5BD;;AA+BA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAM,MAAA,QAAQ,EAAEf,YAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,KAAK,EAAEN,KAHT;AAIE,QAAA,QAAQ,EAAGO,CAAD,IAAON,QAAQ,CAACM,CAAC,CAACiB,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,cAFF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,KAAK,EAAEvB,WAHT;AAIE,QAAA,QAAQ,EAAGK,CAAD,IAAOJ,cAAc,CAACI,CAAC,CAACiB,MAAF,CAASC,KAAV;AAJjC;AAAA;AAAA;AAAA;AAAA,cAVF,eAiBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,EAkBGrB,SAAS,iBAAI,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,MAAnB;AAA0B,QAAA,IAAI,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAlBhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA/DQN,O;;KAAAA,O;AAiET,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\n\nfunction AddTask(props) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const[isLoading, setIsLoading] = useState(false)\n\n  \n  const handleSubmit = (e) => {\n    e.preventDefault(); \n\n    // We need the project id when creating the new task\n    const { projectId } = props;\n    // Create an object representing the body of the POST request\n    const requestBody = { title, description, projectId };\n\n    // Get the token from the localStorage\n    const storedToken = localStorage.getItem('authToken');\n    setIsLoading(true)\n    // Send the token through the request \"Authorization\" Headers   \n    axios\n      .post(\n        `${API_URL}/tasks`,\n        requestBody,\n        { headers: { Authorization: `Bearer ${storedToken}` } }        \n      )\n      .then((response) => {\n        // Reset the state to clear the inputs\n        setTitle(\"\");\n        setDescription(\"\");\n        setIsLoading(false)\n        // Invoke the callback function coming through the props\n        // from the ProjectDetailsPage, to refresh the project details\n        props.refreshProject();\n      })\n      .catch((error) => console.log(error));\n  };\n\n  \n  return (\n    <div className=\"AddTask\">\n      <h3>Add New Task</h3>\n      \n      <form onSubmit={handleSubmit}>\n        <label>Title:</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n\n        <label>Description:</label>\n        <textarea\n          type=\"text\"\n          name=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n\n        <button type=\"submit\">Add Task</button>\n        {isLoading && <Spinner animation=\"grow\" size=\"sm\" />}\n      </form>\n    </div>\n  );\n}\n\nexport default AddTask;"]},"metadata":{},"sourceType":"module"}