{"ast":null,"code":"var _jsxFileName = \"/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/pages/Telefonos.js\",\n    _s = $RefreshSig$();\n\n//Componentes\nimport { Spinner } from 'react-bootstrap'; //Axios usage\n\nimport axios from 'axios'; //use Effect needed\n\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nfunction Phones() {\n  _s();\n\n  //Coming from GET\n  const [infoPhones, setInfoPhones] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getAllInfoRooms = () => {\n    // Get the token from the localStorage\n    const storedToken = localStorage.getItem('authToken'); // Send the token through the request \"Authorization\" Headers\n\n    axios.get(`${API_URL}/habitaciones`, {\n      headers: {\n        Authorization: `Bearer ${storedToken}`\n      }\n    }).then(response => {\n      setInfoRooms(response.data); //console.log(response.data);\n\n      setIsLoading(true);\n    }).catch(error => console.log(error));\n  }; // We set this effect will run only once, after the initial render\n  // by setting the empty dependency array - []\n\n\n  useEffect(() => {\n    getAllInfoRooms();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phone Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Phones, \"qYa+ex9ZgLONil9pdJfZPMWYVoE=\");\n\n_c = Phones;\nexport default Phones;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phones\");","map":{"version":3,"sources":["/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/pages/Telefonos.js"],"names":["Spinner","axios","useEffect","useState","API_URL","process","env","REACT_APP_API_URL","Phones","infoPhones","setInfoPhones","isLoading","setIsLoading","getAllInfoRooms","storedToken","localStorage","getItem","get","headers","Authorization","then","response","setInfoRooms","data","catch","error","console","log"],"mappings":";;;AAAA;AACA,SAASA,OAAT,QAAwB,iBAAxB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AACjB;AACA,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEQ,SAAF,EAAaC,YAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMU,eAAe,GAAG,MAAM;AAC7B;AACA,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,CAF6B,CAI7B;;AACAf,IAAAA,KAAK,CACHgB,GADF,CACO,GAAEb,OAAQ,eADjB,EACiC;AAAEc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASL,WAAY;AAAvC;AAAX,KADjC,EAEEM,IAFF,CAEQC,QAAD,IAAc;AACnBC,MAAAA,YAAY,CAACD,QAAQ,CAACE,IAAV,CAAZ,CADmB,CAEnB;;AACAX,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,KANF,EAOEY,KAPF,CAOSC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAPnB;AAQA,GAbD,CALiB,CAoBjB;AACA;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACfW,IAAAA,eAAe;AACf,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GA/BQL,M;;KAAAA,M;AAiCT,eAAeA,MAAf","sourcesContent":["//Componentes\nimport { Spinner } from 'react-bootstrap';\n//Axios usage\nimport axios from 'axios';\n//use Effect needed\nimport { useEffect, useState } from 'react';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nfunction Phones() {\n\t//Coming from GET\n\tconst [ infoPhones, setInfoPhones ] = useState([]);\n\tconst [ isLoading, setIsLoading ] = useState(false);\n\n\tconst getAllInfoRooms = () => {\n\t\t// Get the token from the localStorage\n\t\tconst storedToken = localStorage.getItem('authToken');\n\n\t\t// Send the token through the request \"Authorization\" Headers\n\t\taxios\n\t\t\t.get(`${API_URL}/habitaciones`, { headers: { Authorization: `Bearer ${storedToken}` } })\n\t\t\t.then((response) => {\n\t\t\t\tsetInfoRooms(response.data);\n\t\t\t\t//console.log(response.data);\n\t\t\t\tsetIsLoading(true);\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t};\n\n\t// We set this effect will run only once, after the initial render\n\t// by setting the empty dependency array - []\n\tuseEffect(() => {\n\t\tgetAllInfoRooms();\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Phone Page</h1>\n\t\t</div>\n\t);\n}\n\nexport default Phones;\n"]},"metadata":{},"sourceType":"module"}