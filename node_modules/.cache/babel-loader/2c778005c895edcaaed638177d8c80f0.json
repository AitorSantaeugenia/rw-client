{"ast":null,"code":"var _jsxFileName = \"/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/context/auth.context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  const verifyStoredToken = () => {\n    // Get the stored token from the localStorage\n    const storedToken = localStorage.getItem(\"authToken\"); // If the token exists in the localStorage\n\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(`${API_URL}/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        // If the server verifies that JWT token is valid  ✅\n        const user = response.data;\n        setUser(user);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      }).catch(error => {\n        // If the server sends an error response (invalid token) ❌\n        setIsLoggedIn(false);\n        setUser(null);\n        setIsLoading(false);\n      });\n    } else {\n      // If the token is not available\n      setIsLoading(false);\n    }\n  };\n\n  const logInUser = token => {\n    localStorage.setItem(\"authToken\", token);\n    verifyStoredToken();\n    /* \n      After saving the token in the localStorage we call the\n      function `verifyStoredToken` which sends a new request to the\n      server to verify the token. Upon receiving the response the function \n      `verifyStoredToken` updates the state variables `isLoggedIn`, `user` and `isLoading`\n    */\n  };\n\n  const logOutUser = () => {\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem(\"authToken\"); // Update the state variables\n\n    setIsLoggedIn(false);\n    setUser(null);\n  };\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      logInUser,\n      logOutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProviderWrapper, \"/wkMYUExdyWtGyjS2AwugXhX2sw=\");\n\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"sources":["/home/aitor/Desktop/ironhack/Web Dev/projects/reto_web/client/src/context/auth.context.js"],"names":["React","useState","useEffect","axios","API_URL","process","env","REACT_APP_API_URL","AuthContext","createContext","AuthProviderWrapper","props","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","verifyStoredToken","storedToken","localStorage","getItem","get","headers","Authorization","then","response","data","catch","error","logInUser","token","setItem","logOutUser","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AAEA,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,EAApB;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,IAAD,CAAhC;;AAGA,QAAMiB,iBAAiB,GAAG,MAAM;AAC9B;AACA,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB,CAF8B,CAI9B;;AACA,QAAIF,WAAJ,EAAiB;AACf;AACAhB,MAAAA,KAAK,CAACmB,GAAN,CACG,GAAElB,OAAQ,cADb,EAEE;AAAEmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASL,WAAY;AAAvC;AAAX,OAFF,EAICM,IAJD,CAIOC,QAAD,IAAc;AAClB;AACA,cAAMV,IAAI,GAAGU,QAAQ,CAACC,IAAtB;AACAV,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAVD,EAWCa,KAXD,CAWQC,KAAD,IAAW;AAChB;AACAhB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAhBD;AAkBD,KApBD,MAoBO;AACL;AACAA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GA7BD;;AAgCA,QAAMe,SAAS,GAAIC,KAAD,IAAW;AAC3BX,IAAAA,YAAY,CAACY,OAAb,CAAqB,WAArB,EAAkCD,KAAlC;AACAb,IAAAA,iBAAiB;AAEjB;AACJ;AACA;AACA;AACA;AACA;AACG,GAVD;;AAYA,QAAMe,UAAU,GAAG,MAAM;AACvB;AACAb,IAAAA,YAAY,CAACc,UAAb,CAAwB,WAAxB,EAFuB,CAIvB;;AACArB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAPD;;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,UAAF;AAAcE,MAAAA,SAAd;AAAyBE,MAAAA,IAAzB;AAA+Bc,MAAAA,SAA/B;AAA0CG,MAAAA;AAA1C,KADT;AAAA,cAGGtB,KAAK,CAACwB;AAHT;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAvEQzB,mB;;KAAAA,mB;AAyET,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  \n    \n  const verifyStoredToken = () => { \n    // Get the stored token from the localStorage\n    const storedToken = localStorage.getItem(\"authToken\");\n    \n    // If the token exists in the localStorage\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(\n        `${API_URL}/auth/verify`, \n        { headers: { Authorization: `Bearer ${storedToken}`} }\n      )\n      .then((response) => {\n        // If the server verifies that JWT token is valid  ✅\n        const user = response.data;\n        setUser(user);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        // If the server sends an error response (invalid token) ❌\n        setIsLoggedIn(false);\n        setUser(null);\n        setIsLoading(false);\n      });\n\n    } else {\n      // If the token is not available\n      setIsLoading(false);\n    }\n  }\n  \n\n  const logInUser = (token) => {\n    localStorage.setItem(\"authToken\", token);\n    verifyStoredToken();\n    \n    /* \n      After saving the token in the localStorage we call the\n      function `verifyStoredToken` which sends a new request to the\n      server to verify the token. Upon receiving the response the function \n      `verifyStoredToken` updates the state variables `isLoggedIn`, `user` and `isLoading`\n    */  \n  }\n\n  const logOutUser = () => {\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem(\"authToken\");\n    \n    // Update the state variables\n    setIsLoggedIn(false);\n    setUser(null);\n  }    \n\n\n  useEffect(() => {\n    verifyStoredToken();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn, isLoading, user, logInUser, logOutUser }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport { AuthProviderWrapper, AuthContext };"]},"metadata":{},"sourceType":"module"}